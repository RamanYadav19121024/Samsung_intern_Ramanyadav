`timescale 1ns / 1ps

module VGA_cntrl(
    input wire i_clk,           // base clock
    input wire i_rst,           // reset: restarts frame
    output wire o_hs,           // horizontal sync
    output wire o_vs,           // vertical sync
    output wire o_active,       // high during active pixel drawing
    output wire [5:0] o_x,      // current pixel x position
    output wire [5:0] o_y       // current pixel y position
    );

    localparam HS_STA = 10;               // horizontal sync start
    localparam HS_END = 16;               // horizontal sync end
    localparam HS_STA2 = 32;              // horizontal 2nd sync start
    localparam HA_STA = 16;               // horizontal active pixel start
    localparam VS_STA = 2;                // vertical sync start
    localparam VS_END = 10;               // vertical sync end
    localparam VS_STA2 = 26;               // vertical 2nd sync start
    localparam VA_STA = 10;               // vertical active pixel start
    localparam VA_END = 26;               // vertical active pixel end
    localparam LINE   = 45;               // complete line (pixels)
    localparam SCREEN = 35;               // complete screen (lines)

    reg [5:0] h_count;  // line position
    reg [5:0] v_count;  // screen position

    // generate sync signals (active low)
    assign o_hs = ~(((h_count >= HS_STA) & (h_count < HS_END))|(h_count >= HS_STA2));
    assign o_vs = ~(((v_count >= VS_STA) & (v_count < VS_END))|(v_count >= VS_STA2));

    // keep x and y bound within the active pixels
    assign o_x = (h_count < HA_STA) ? 0 : (h_count - HA_STA);
    assign o_y = (v_count >= VA_END) ? (VA_END - 1) : (v_count);

    // active: high during active pixel drawing
    assign o_active = ((h_count >= HA_STA) && (h_count < HS_STA2) && (v_count >= VS_END) && (v_count < VA_END))  ; 


    always @ (posedge i_clk)
    begin
        if (i_rst)  // reset to start of frame
            h_count <= 0;
        else if (h_count == LINE)  // end of line
            h_count <= 0;
        else 
            h_count <= h_count + 1;
        
        if (i_rst)
            v_count <= 0;
        else if (v_count == SCREEN)  // end of screen
            v_count <= 0;
        else if (h_count == LINE)
            v_count <= v_count + 1;
    end
endmodule

